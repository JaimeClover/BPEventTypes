TITLE:: EventTypes
summary:: adds multiple event types
categories:: Streams-Patterns-Events>Events
related:: Tutorials/Presets, Classes/SynthPreset, Classes/Preset, Classes/Event, Classes/PresetChain, Classes/PC

DESCRIPTION::
This class contains a dictionary of code::\play:: functions, which can be added as link::Overviews/Event_types::. To include any of these event types, call code::EventTypes.includeEventType(\anEventType)::, or code::EventTypes.includeAllEventTypes:: to include them all.

All of the below event types should be thought of as extensions to the default code::\note:: event, which means they give you access to all the keys in the default parent event (degree, note, db, legato, etc.), and ultimately they simply produce modified versions of teletype::\note:: events. The following event types are currently available:

definitionList::
  ## \preset || Use synth presets (see the link::Tutorials/Presets:: tutorial for code examples). Adds the following keys:
  table::
    ## \preset || which preset to use.
    ## \useControlDefaults || a flag indicating whether the SynthDef's control default values should be used, instead of values from the default parent event (see link::Classes/EventTypes#-useControlDefaults::).
    ## \useKeyOverrides || a flag indicating whether certain keys in an Event will override certain other keys in the preset (see link::Classes/EventTypes#-useKeyOverrides::).
  ::
  ## \echo || Add language-side delay effects. Adds the following keys (default behavior in parentheses):
  table::
    ## \numEchoes || number of echoes to play, not including the initial note (0).
    ## \echoTime || time in beats between each echo (0.5).
    ## \echoCoef || amplitude coefficient for exponential decay (0.5).
    ## \echoPan || type of panning modulation to use (none). See discussion of the code::panFunctions:: method below for details and examples.
    ## \echoSpread || amount of stereo spread (1).
    ## \echoRhythm || an array of relative durations for each echo, which serves as a modifier to \echoTime.
    ## \echoSieve || an array of amplitude modifiers for each echo.
    ## \arpeggiateEchoes || a boolean. If true, when playing a chord this will play 1 note of the chord per echo. If false, plays the full chord for each echo (false).
  ::
  ## \arp || Turns chords (lists of notes) into arpeggios. Adds the following keys (default behavior in parentheses):
  table::
    ## \arpKeys || the keys that determine which pitches are included in the arpeggio (by default, this is any key that is used to calculate freq).
    ## \subdivisions || number of arpeggiated notes per chord (by default, uses the chord size).
    ## \hop || how much the index is advanced per note (1).
    ## \skip || an offset to the index, per subdivision (0).
    ## \jump || an offset to the index, per chord repetition (0).
    ## \octavate || determines if the chord is played in different octaves for each repetition (0).
    ## \maxOctaves || the maximum range of octaves that can be covered by octavating (8).
    ## \octaves || used instead of octavate, specify a list of octave modifiers per repition of the chord.
    ## \arpPan || type of panning modulation to use (none). See discussion of the code::panFunctions:: method below for details and examples.
    ## \arpRhythm || a list of the relative durations of each note.
    ## \arpLegato || duration of the arpeggio (1). if > 1, arpeggios will overlap. If < 1, arpeggios underlap.
    ## \arpSieve || a list of amplitudes for each note in the arpeggio.
    ## \weights || a list of weights used in code::\wrand:: mode (see the \mode key below).
    ## \mode || determines the order in which arpeggiated notes are played (\fwd). See discussion of the code::arpFunctions:: method below for details and examples.
  ::
::
The following composite event types are also included. They combine functionality from 2 or more of the above event types.
List::
  ## \presetEcho
  ## \presetArp
  ## \echoArp
  ## \presetEchoArp
::

CLASSMETHODS::

METHOD:: panFunctions

A dictionary of functions that determine panning behavior in the \echo and \arp event types. Use one of the following symbols in the \echoPan and/or \arpPan key to get the associated behavior:
table::
  ## \rand || random panning between -1 and 1, uniform distribution.
  ## \gauss || random pannning between -1 and 1, pseudo-gaussian distribution.
  ## \lr || ping pong (left, right, left, right, etc.).
  ## \rl || ping pong (right, left, right, left, etc.).
::

DISCUSSION::
code::
(
EventTypes.includeEventType([\echo, \arp, \echoArp]);

Server.default.waitForBoot {
    SynthDef(\ping, { arg freq = 400, pan = 0, amp = 0.2;
        var sig = SinOsc.ar(freq) * Env.perc(0.01, 0.2).kr(2);
        Out.ar(0, Pan2.ar(sig, pan, amp));
    }).add;
}
)

// ping-pong echoes:
(type: \echo, instrument: \ping, numEchoes: 4, echoPan: \lr).play;

// randomly panned arpeggio:
(type: \arp, instrument: \ping, degree: [0, 2, 4, 6], arpPan: \rand).play;

// using both echoPan and arpPan together (the pan values are summed):
(
(type: \echoArp, instrument: \ping, degree: [0, 2, 4, 6],
arpPan: \rand, \numEchoes: 4, \echoPan: \rl, \echoTime: 1).play;
)
::

You can add custom pan functions:
code::
// left, center, right, center:
EventTypes.panFunctions[\lcrc] = {[-1, 0, 1, 0]};
(type: \arp, instrument: \ping, degree: [0, 2, 4, 6], arpPan: \lcrc).play;
::

Or use an array to specify pan values directly:
code::
// gradually pan the arpeggio from left to right:
(type: \arp, instrument: \ping, degree: [0, 2, 4, 6], arpPan: [-1, -0.3, 0.3, 1]).play;
::

METHOD:: arpFunctions

A dictionary of functions that determine the order in which arpeggiated notes are played when using the \arp event type. Use one of the following symbols in the \mode key to achieve the desired behavior:
table::
  ## \fwd || go forward through the list of pitches.
  ## \rev || go in reverse order through the list of pitches.
  ## \up || go in ascending order through the list of pitches.
  ## \down || go in descending order through the list of pitches.
  ## \shuf || shuffle the list of pitches (does not repeat a note until the whole chord has been played).
  ## \rand || choose a random pitch (repeats are possible).
  ## \xrand || choose a random pitch, but never repeat the last choice.
  ## \wrand || weighted randomness, using weights provided by the code::\weights:: key.
  ## \upDown || go up, then down.
  ## \downUp || go down, then up.
  ## \fwdRev || go forward, then reverse.
  ## \revFwd || go reverse, then forward.
::

DISCUSSION::
code::
(
EventTypes.includeEventType(\arp);

Server.default.waitForBoot {
    SynthDef(\ping, { arg freq = 400, pan = 0, amp = 0.2;
        var sig = SinOsc.ar(freq) * Env.perc(0.01, 0.2).kr(2);
        Out.ar(0, Pan2.ar(sig, pan, amp));
    }).add;
}
)

(
Pbind(
    \type, \arp,
    \instrument, \ping,
    \degree, [0, 2, 4, 6],
    \subdivisions, 8,
    \mode, Pseq([\fwd, \rev, \rand, \shuf]),
    \callback, {~degree.postln}
).play;
)
::

You can add custom arp functions:
code::
(
// play even indices, then odd indices.
// [0, 1, 2, 3] becomes [0, 2, 1, 3]:
EventTypes.arpFunctions[\evenOdd] = { arg array;
    array = array.clump(2).flop.flat;
    EventTypes.arpFunctions[\fwd].value(array)
};

(type: \arp, degree: [0, 2, 4, 6], mode: \evenOdd).play;
)
::

Or use an array in the \mode key to specify the order of indices:
code::
(type: \arp, degree: [0, 2, 4, 6], mode: [0, 3, 2, 1]).play;
::

METHOD:: useKeyOverrides
When using the \preset event type, this is a global flag indicating whether certain keys in an Event will override certain other keys in the preset, e.g. whether pitch-related keys like \degree will override \freq. You can override this value in an Event or Pbind by setting the \useKeyOverrides key. The default value is code::true::. See code examples in the link::Tutorials/Presets:: tutorial.


METHOD:: keyOverrides

When using the \preset event type, this returns a dictionary specifying which keys will override which other keys, e.g. code::mtranspose: [\freq, \detunedFreq, \midinote, \note]:: means that if you use the \mtranspose key in a Pbind, it will override the \freq, \detunedFreq, \midinote, and \note keys in the preset. This behavior can be turned off by setting the \useKeyOverrides key to code::false::, or it can be turned off globally by running code::EventTypes.useKeyOverrides = false::.


METHOD:: useControlDefaults

When using the \preset event type, this is a global flag indicating whether the SynthDef's control default values should be used, instead of the normal behavior in which some values are determined by the defaultParentEvent. You can override this value in an Event or Pbind by setting the \useControlDefaults key. The default value is code::false::. See more code examples in the link::Tutorials/Presets:: tutorial.

DISCUSSION::
code::
EventTypes.includeEventType(\preset);

(// always use control default values
EventTypes.useControlDefaults = true;
Pbind(\type, \preset).play; // pitch = 440 Hz
)

// compare to the default behavior:

(// the default parent event determines the pitch
EventTypes.useControlDefaults = false;
Pbind(\type, \preset).play; // pitch = middle C
)
::
